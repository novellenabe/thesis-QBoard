import sys
import os

from PyQt5 import QtWidgets
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QLabel, QVBoxLayout, QHBoxLayout, QGridLayout, QPushButton, QCheckBox, QRadioButton, QButtonGroup, QLineEdit, QSpacerItem, QSizePolicy)
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtGui import QFont, QPixmap              # For Fonts
from PyQt5.QtCore import Qt, QTimer, QTime, QSize   # For alignment

''' ERROR FILE HANDLING '''
from file_handling import file_handling

class MainScreen():
    def __init__(self, main_window):
        self.main_window = main_window
        
    def MainScreen(self):
        central_Widget = QWidget()
        central_Widget.setObjectName("central_Widget")
        layout = QVBoxLayout(central_Widget)
        layout.setObjectName("layout")
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        self.main_window.setCentralWidget(central_Widget)
        
        ''' HEAD WIDGET ''' 
        # USES SPACE BETWEEN
        HEADER_widget = QWidget()
        HEADER_layout = QHBoxLayout()
        HEADER_widget.setLayout(HEADER_layout)
        HEADER_widget.setObjectName("HEADER_widget")
        HEADER_widget.setFixedHeight(57)
        
        spacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        
        #self.time_label = QLabel("00:00")
        self.time_label = QLabel("00:00 AM")
        self.time_label.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        self.time_label.setObjectName("TIME_LABEL")
        
        #left_widget = QLabel("Left")
        LOCATION_UNIQUE_ID = QLabel("USC TC")
        LOCATION_UNIQUE_ID.setObjectName("LOCATION_UNIQUE_ID")
        LOCATION_UNIQUE_ID.setAlignment(Qt.AlignVCenter | Qt.AlignCenter)
        LOCATION_UNIQUE_ID_layout = QVBoxLayout() 
        LOCATION_UNIQUE_ID_widget = QWidget()
        LOCATION_UNIQUE_ID_widget.setFixedWidth(150)
        LOCATION_UNIQUE_ID_widget.setFixedHeight(45)

        LOCATION_UNIQUE_ID_widget.setObjectName("LOCATION_UNIQUE_ID_widget")
        LOCATION_UNIQUE_ID_layout.addWidget(LOCATION_UNIQUE_ID)
        LOCATION_UNIQUE_ID_widget.setLayout(LOCATION_UNIQUE_ID_layout)
        
        HEADER_layout.addWidget(self.time_label)
        #HEADER_layout.addItem(spacer)  # The spacer will push left and right widgets apart
        HEADER_layout.addWidget(LOCATION_UNIQUE_ID_widget)
        
        HEADER_layout.setContentsMargins(10, 0, 10, 0)
        HEADER_layout.setSpacing(0)
        
        layout.addWidget(HEADER_widget)
        
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)
        
        
        ''' BODY WIDGET '''
        BODY_widget = QWidget()
        BODY_layout = QVBoxLayout()
        BODY_layout.setContentsMargins(0, 0, 0, 0)
        BODY_layout.setSpacing(0)
        BODY_widget.setLayout(BODY_layout)
        BODY_widget.setObjectName("BODY_widget")
        
        # CURTAIN HEADER HERE
        CURTAINS_TOP_widget = QWidget()
        CURTAINS_TOP_widget.setObjectName("CURTAINS_TOP_widget")
        CURTAINS_TOP_layout = QHBoxLayout()
        CURTAINS_TOP_layout.setContentsMargins(-0, 0, 20, 0)
        CURTAINS_TOP_layout.setSpacing(0)
        CURTAINS_TOP_widget.setFixedHeight(45)
        CURTAINS_TOP_widget.setLayout(CURTAINS_TOP_layout)
        
        # TERMINAL_TITLE
        TERMINAL_TITLE = QLabel("Terminal")
        TERMINAL_TITLE.setObjectName("TERMINAL_TITLE")
        TERMINAL_TITLE.setAlignment(Qt.AlignCenter)
        TERMINAL_TITLE_widget = QWidget()
        TERMINAL_TITLE_layout = QVBoxLayout()
        TERMINAL_TITLE_layout.addWidget(TERMINAL_TITLE)
        TERMINAL_TITLE_layout.setContentsMargins(0, 0, 0, 0)
        TERMINAL_TITLE_layout.setSpacing(0)
        TERMINAL_TITLE_widget.setFixedWidth(300)
        TERMINAL_TITLE_widget.setLayout(TERMINAL_TITLE_layout)
        TERMINAL_TITLE_widget.setObjectName("TERMINAL_TITLE_widget")
        CURTAINS_TOP_layout.addWidget(TERMINAL_TITLE_widget)
        
        # QUEUEING PASSENGERS
        QUEUEING_PASSENGERS = QLabel("Queueing Passengers")
        QUEUEING_PASSENGERS.setObjectName("QUEUEING_PASSENGERS")
        QUEUEING_PASSENGERS.setAlignment(Qt.AlignCenter)
        QUEUEING_PASSENGERS_widget = QWidget()
        QUEUEING_PASSENGERS_layout = QVBoxLayout()
        QUEUEING_PASSENGERS_layout.addWidget(QUEUEING_PASSENGERS)
        QUEUEING_PASSENGERS_layout.setContentsMargins(0, 0, 0, 0)
        QUEUEING_PASSENGERS_layout.setSpacing(0)
        QUEUEING_PASSENGERS_widget.setFixedWidth(300)
        QUEUEING_PASSENGERS_widget.setLayout(QUEUEING_PASSENGERS_layout)
        QUEUEING_PASSENGERS_widget.setObjectName("QUEUEING_PASSENGERS_widget")
        CURTAINS_TOP_layout.addWidget(QUEUEING_PASSENGERS_widget)
        
        
        CURTAINS_BOTTOM = QWidget()
        CURTAINS_BOTTOM.setObjectName("CURTAINS_BOTTOM")
        CURTAINS_BOTTOM.setFixedHeight(45)
        
        
        BODY_main_content = QWidget()
        BODY_main_content.setObjectName("BODY_main_content")
        
        BODY_layout.addWidget(CURTAINS_TOP_widget)
        BODY_layout.addWidget(BODY_main_content)
        BODY_layout.addWidget(CURTAINS_BOTTOM)
        
        layout.addWidget(BODY_widget)
        
        ''' BOTTOM WIDGET '''
        BOTTOM_widget = QWidget()
        BOTTOM_layout = QHBoxLayout()
        BOTTOM_layout.setContentsMargins(20, 0, 20, 0)
        BOTTOM_layout.setSpacing(0)
        BOTTOM_widget.setLayout(BOTTOM_layout)
        BOTTOM_widget.setObjectName("BOTTOM_widget")
        BOTTOM_widget.setFixedHeight(100)
        
        BOTTOM_widget_spacer = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        
        # PROFILE
        PROFILE_widget = QWidget()
        PROFILE_widget.setObjectName("PROFILE_widget")
        PROFILE_layout = QHBoxLayout()
        PROFILE_widget.setLayout(PROFILE_layout)
        PROFILE_widget.setFixedWidth(572)
        PROFILE_layout.setSpacing(10)
        
        
        USERICON_label = QLabel("Novell")
        USERICON_label_pixmap = QPixmap("assets/images/Icon-Image.png")
        USERICON_scaled_pixmap = USERICON_label_pixmap.scaled(100, 100, Qt.KeepAspectRatio)
        USERICON_label.setPixmap(USERICON_scaled_pixmap)
        USERICON_label.setScaledContents(True)
        USERICON_label.setFixedWidth(100)
        
        # PROFILE-CONTAINER
        PROFILECONTAINER_widget = QWidget()
        PROFILECONTAINER_widget.setObjectName("PROFILECONTAINER_widget")
        PROFILECONTAINER_layout = QVBoxLayout()
        PROFILECONTAINER_layout.setContentsMargins(0, 0, 0, 0)
        
        DRIVERNAME_label = QLabel("Albert Novell Enabe")
        #DRIVERNAME_label.setFixedWidth(30)
        DRIVERNAME_label.setObjectName("DRIVERNAME_label")
        
        SHUTTLE_label = QLabel("Shuttle Dashboard 1")
        #SHUTTLE_label.setFixedWidth(30)
        SHUTTLE_label.setObjectName("SHUTTLE_label")
        
        PROFILECONTAINER_layout.addWidget(DRIVERNAME_label)
        PROFILECONTAINER_layout.addWidget(SHUTTLE_label)
        
        PROFILECONTAINER_widget.setLayout(PROFILECONTAINER_layout)
        
        PROFILE_layout.addWidget(USERICON_label)
        PROFILE_layout.addWidget(PROFILECONTAINER_widget)
        
        
        # LOGOUT BUTTON
        
        LOGOUT_widget = QWidget()
        LOGOUT_widget.setObjectName("LOGOUT_widget")
        LOGOUT_layout = QVBoxLayout()
        LOGOUT_layout.setAlignment(Qt.AlignRight)
        LOGOUT_widget.setLayout(LOGOUT_layout)

        
        self.LOGOUT_button = QPushButton()
        self.LOGOUT_button.setObjectName("LOGOUT_button")
        LOGOUT_icon = QIcon("assets/icons/Logout")
        self.LOGOUT_button.setIcon(LOGOUT_icon)
        self.LOGOUT_button.setIconSize(QSize(32, 32))
        self.LOGOUT_button.setText(" Logout")
        self.LOGOUT_button.setStyleSheet("padding: 10px;")
        self.LOGOUT_button.setFixedWidth(160)
        self.LOGOUT_button.setFixedHeight(60)
        self.LOGOUT_button.clicked.connect(self.on_LOGOUT_button_clicked)
        
        self.clicked_buttons = set() # Keep track of clicked buttons
        
        LOGOUT_layout.addWidget(self.LOGOUT_button)
        
        BOTTOM_layout.addWidget(PROFILE_widget)
        #BOTTOM_layout.addItem(BOTTOM_widget_spacer)
        BOTTOM_layout.addWidget(LOGOUT_widget)
        layout.addWidget(BOTTOM_widget)
        
        stylesheet = file_handling.load_stylesheet("screens/MainScreen/MainScreen.css")
        central_Widget.setStyleSheet(stylesheet)
        
    
    
    def update_time(self):
        #current_time = QTime.currentTime().toString("hh:mm:ss")
        current_time = QTime.currentTime().toString("hh:mm AP")
        self.time_label.setText(current_time)
        
        
    def on_LOGOUT_button_clicked(self):
        print("Hello World")
        
        # THIS STATE WILL THE BUTTON PERPETUALLY ACTIVE
        '''
        if self.LOGOUT_button not in self.clicked_buttons:
            self.LOGOUT_button.setStyleSheet("#LOGOUT_button { background-color: red; }")
            self.clicked_buttons.add(self.LOGOUT_button)
        else:
            self.LOGOUT_button.setStyleSheet("#LOGOUT_button { background-color: lightgray; }")
            self.clicked_buttons.remove(self.LOGOUT_button)
        '''
        
        